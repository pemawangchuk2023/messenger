
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  image           String?
  email           String        @unique
  emailVerified   DateTime?
  hashedPassword  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  conversations   Conversation[] @relation("UserConversations")
  seenMessages    Message[]      @relation("SeenMessages")
  accounts        Account[]
  messages        Message[]
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  lastMessageAt  DateTime   @default(now())
  name           String?
  isGroup        Boolean?
  messages       Message[]
  users          User[]     @relation("UserConversations")
  
  userIds        Int[]  
}

model Message {
  id             Int         @id @default(autoincrement())
  body           String?
  image          String?
  createdAt      DateTime    @default(now())
  
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId       Int
  sender         User        @relation(fields: [senderId], references: [id], onDelete: Cascade)

  seen           User[]      @relation("SeenMessages")
}
